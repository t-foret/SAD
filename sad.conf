# New Makefile -- Local Configuration Part Sample
#

HOST:=$(shell uname -n)
OS_ID:=$(shell . /etc/os-release && echo $$ID)
ARCH:=$(shell $(SADDIR)/bin/HostArch)
ARCH_INC:=$(SADDIR)/arch/$(ARCH)/include
OS_NAME:=$(shell uname)
HEADERS := tcl.h tclDecls.h tclPlatDecls.h tk.h tkDecls.h
HEADERS_TCL := tcl.h tclDecls.h tclPlatDecls.h
HEADERS_TK := tk.h tkDecls.h

## Compiler setting examples

# -- Interl C/Fortran Compiler 7.1 --
#COMPILER=Intel
#FC=ifc
#CC=icc

# -- Interl C/Fortran Compiler 8.x --
#COMPILER=Intel
#FC=ifort
#CC=icc
##SYS_FOPT+=-vms -ccdefault list
#SYS_FOPT_ENABLE_BACKSLASH_ESCAPE=-assume bscc
#SYS_DEPOBJ+=sim/intel_fortran8.o

# -- GNU Compiler Collection 4.1 or 4.2 --
_USE_GFORTRAN= YES
_USE_G95= NO
COMPILER=GNU
HAVE_F_FGETC=YES
CC=gcc
SYS_CC_ABIOPT= -g -Wall -std=gnu99
COPT= -Ofast -Wall -std=gnu99
# -fopenmp
FC=gfortran
SYS_FOPT= -Wall  -Ofast -ffixed-line-length-none
FOPT= -Ofast -fno-second-underscore -fdollar-ok -fargument-alias -frecursive -fbackslash -fall-intrinsics -Wall -fno-range-check -fbacktrace -falign-functions=64  -falign-jumps -falign-loops -falign-labels -ffpe-summary=none -std="gnu" -fcheck=no-all -ffixed-line-length-none 
# -floop-block
# -fallow-invalid-boz
#-fprofile-generate

ifeq ($(OSTYPE),darwin)
FOPT= -Ofast -fno-second-underscore -fdollar-ok -fargument-alias -frecursive -fbackslash -fall-intrinsics -Wall -Wno-integer-division -fno-range-check -fbacktrace -falign-functions=64  -falign-jumps -falign-loops -falign-labels -ffpe-summary=none -std="gnu" -fcheck=no-all -ffixed-line-length-none -floop-block
SYS_FOPT= -Wall -m64 -Ofast -isysroot `xcrun --show-sdk-path`
SYS_CC_ABIOPT= -Wall -std=gnu11 -pedantic -m64 -isysroot `xcrun --show-sdk-path`
COPT= -Ofast -Wall -std=c2x -pedantic -m64 -isysroot `xcrun --show-sdk-path`
_SYS_COPT_GCC=-Wall -std=c2x -pedantic -isysroot `xcrun --show-sdk-path`
CC=clang
endif

ifeq ($(OSTYPE),linux)
LDOPT= -L/usr/lib/x86_64-linux-gnu -lcrypt -ffinite-math-only
#-falign-loops -floop-block -falign-labels -ffpe-summary=none -std="gnu" -fcheck=no-all -ffixed-line-length-none
endif

ifeq ($(OSTYPE),ubuntu)
LDOPT= -L/usr/lib/x86_64-linux-gnu -lcrypt
SYS_CC_ABIOPT= -g -Wall -std=c11
COPT= -Ofast -Wall -std=c11
FOPT= -Ofast -fno-second-underscore -fdollar-ok -fargument-alias -frecursive -fbackslash -fall-intrinsics -Wall -fno-range-check -fbacktrace -falign-functions=64 -falign-jumps -falign-labels -ffpe-summary=none -std="gnu" -fcheck=no-all -ffixed-line-length-none
endif

#ifeq ($(OSTYPE),cygwin)
#FC=g77
#FOPT= -Ofast -fno-second-underscore -fdollar-ok -fargument-alias  -mfancy-math-387 -fbackslash 
#else
#FC=gfortran
#endif

#HAVE_F_LNBLNK=NO
#SYS_DEPOBJ+=sim/unix_fortran_.o sim/fseek_Dummy_.o

# -- Debugging source tree --
#COPT=-g -Ofast -m64

# -- Debugging memory allocator --
#COPT+=-DDEBUG_MEMORY

# -- Debugging memory usege --
#COPT+=-DUSE_ELECTRICFENCE -DUSE_ELECTRICFENCE_FREECHECK
#EXE_LIBS+=-L/usr/local/lib -lefence

## SAD root directory
SAD_ROOT=$(SADDIR)

## Contrib source archive directory
#SOURCE_ARCHIVE_DIR=/usr/ports/distfiles

## X11 setup
#
USE_X11=YES
X11_PREFIX=/usr/X11
##X11_INCDIR=$(X11_PREFIX)/include
##X11_LIBDIR=$(X11_PREFIX)/lib
##X11_LIBS=-lX11
ifneq ($(filter debian ubuntu,$(OS_ID)),)
X11_INCDIR=/usr/include/X11
X11_LIBDIR=/usr/lib/x86_64-linux-gnu
endif
ifneq ($(filter almalinux,$(OS_ID)),)
X11_INCDIR=/usr/include/X11
X11_LIBDIR=/usr/lib64
endif
ifneq ($(filter freebsd,$(OS_ID)),)
X11_INCDIR=/usr/local/include/X11
X11_LIBDIR=/usr/local/lib
endif

## Tcl/Tk setup
#
USE_TCLTK=YES
BUILD_TCLTK=YES
#BUILD_TCLTK=NO
TCLTK_CFLAGS+=-DTCL_NO_STACK_CHECK
ifeq ($(OSTYPE),darwin)
ifeq ($(MACHTYPE),x86_64)
TCLTK_CFLAGS+= -m64
endif
ifeq ($(MACHTYPE),powerpc)
TCLTK_CFLAGS+= -m64
endif
endif

##USE_TCLTK_SHARED_LIBRARY=YES
##TCLTK_GUI_BACKEND=X11|AQUA
TCLTK_CONFIG_ARG=--enable-64bit
TCLTK_FONT_SYSTEM=Xft
TCLTK_VERSION=8.6.11
ifeq ($(OSTYPE),cygwin)
endif
ifeq ($(filter debian ubuntu freebsd,$(OS_ID)),)
TCLTK_PREFIX=$(SAD_ARCH_DIR)
TCLTK_INCDIR=$(TCLTK_PREFIX)/include
TCLTK_LIBDIR=$(TCLTK_PREFIX)/lib
##TCLTK_LIBS=-ltk$(TCLTK_FEATURE_VERSION) -ltcl$(TCLTK_FEATURE_VERSION)
endif
# USE_TCLTK_TRIM_VERSION=NO
# USE_TCLTK_SHARED_LIBRARY=NO
# TCLTK_INCDIR=/usr/include/tcl
# TCLTK_INCDIR_SYS=/usr/include/tcl
# TCLTK_LIBDIR=/usr/lib/x86_64-linux-gnu
# TCLTK_LIBS=-ltcl -ltk
# TCLTK_CFLAGS+=-I$(TCLTK_INCDIR)
# SYS_CC_ABIOPT+=-I$(TCLTK_INCDIR)
# COPT+=-I$(TCLTK_INCDIR)
# CPPFLAGS+=-I$(TCLTK_INCDIR)
ifneq ($(filter debian ubuntu,$(OS_ID)),)
TCLTK_INCDIR=/usr/include/tcl
TCLTK_INCDIR_SYS=/usr/include/tcl
.PHONY: link-tcltk-headers
link-tcltk-headers:
	@echo "[link-tcltk-headers] OS=$(OS_ID) ARCH=$(ARCH)"
	@mkdir -p $(ARCH_INC)
	@$(foreach h,$(HEADERS),ln -sf $(TCLTK_INCDIR_SYS)/$(h) $(ARCH_INC)/$(h);)
all: link-tcltk-headers
endif
ifneq ($(filter freebsd,$(OS_ID)),)
USE_TCLTK_TRIM_VERSION=YES
TCL_INCDIR_SYS=/usr/local/include/tcl8.6
TK_INCDIR_SYS=/usr/local/include/tk8.6
.PHONY: link-tcltk-headers
link-tcltk-headers:
	@echo "[link-tcltk-headers] OS=$(OS_ID) ARCH=$(ARCH)"
	@mkdir -p $(ARCH_INC)
	@$(foreach h,$(HEADERS_TCL),ln -sf $(TCL_INCDIR_SYS)/$(h) $(ARCH_INC)/$(h);)
	@$(foreach h,$(HEADERS_TK),ln -sf $(TK_INCDIR_SYS)/$(h) $(ARCH_INC)/$(h);)
all: link-tcltk-headers
endif

## Python setup
#
#USE_PYTHON=YES
##BUILD_PYTHON=YES
##USE_PYTHON_THREAD=YES
##PYTHON_VERSION=2.4
##PYTHON_PATCH_LEVEL=1
##PYTHON_PREFIX=$(SAD_ARCH_DIR)
##PYTHON_INCDIR=$(PYTHON_PREFIX)/include/python$(PYTHON_VERSION)
##PYTHON_LIBDIR=$(PYTHON_PREFIX)/lib
##PYTHON_LIBS=-lpython$(PYTHON_VERSION)
##PYTHON_PATH=$(PYTHON_PREFIX)/lib/python$(PYTHON_VERSION)
ifneq ($(filter debian ubuntu,$(OS_ID)),)
  USE_PYTHON=YES
  BUILD_PYTHON=NO
  PYTHON_VERSION=3.13
endif
ifneq ($(filter freebsd,$(OS_ID)),)
  USE_PYTHON=YES
  BUILD_PYTHON=NO
  PYTHON_VERSION=3.11
endif
ifneq ($(filter almalinux,$(OS_ID)),)
  USE_PYTHON=YES
  BUILD_PYTHON=NO
  PYTHON_VERSION=3.11
endif

## EPICS setup
#
#USE_EPICS=YES
#EPICS_INCDIR=$(EPICS_PREFIX)/include
#EPICS_LIBDIR=$(EPICS_PREFIX)/lib
#EPICS_LIBS=-lca -lDb -lCom
ifneq ($(filter kekb-co-user01 kekb-co-user02 kekb-co-user03 afsad1c afsad2c afsad3c,$(HOST)),)
USE_EPICS=YES
EPICS_PREFIX=$(shell echo $$EPICS_ROOT)
EPICS_INCDIR=$(EPICS_PREFIX)/include
EPICS_LIBDIR=$(EPICS_PREFIX)/lib
EPICS_LIBS=-lca -lDb -lCom
$(info [SAD] EPICS turned on.)
$(info [SAD] OS_NAME = $(OS_NAME).)
$(info [SAD] CPU_ARCH = $(CPU_ARCH).)
endif

## for KEK-B EPICS setup
#USE_KEKB_EPICS=YES
ifneq ($(filter kekb-co-user01 kekb-co-user02 kekb-co-user03 afsad1c afsad2c afsad3c,$(HOST)),)
USE_KEKB_EPICS=YES
endif

# --- don't touch ---
ifeq ($(USE_KEKB_EPICS),YES)
KEKB_EPICS_ARCH=Unknown

ifeq ($(OS_NAME),Linux)
ifeq ($(CPU_ARCH),i386)
KEKB_EPICS_ARCH=Linux
endif
endif

ifeq ($(OS_NAME),OSF1)
ifeq ($(CPU_ARCH),Alpha)
KEKB_EPICS_ARCH=alpha
endif
endif

ifeq ($(OS_NAME),Darwin)
ifeq ($(CPU_ARCH),i386)
KEKB_EPICS_ARCH=darwin-x86
EPICS_PREFIX=/proj/epics/R314/R3149/base
EPICS_LIBS=-lca -ldbStaticHost -lCom
COPT+=-I$(EPICS_PREFIX)/include/os/Darwin
endif
ifeq ($(CPU_ARCH),PowerPC)
KEKB_EPICS_ARCH=darwin-ppc
EPICS_PREFIX=/proj/epics/R314/R3149/base
EPICS_LIBS=-lca -ldbStaticHost -lCom
COPT+=-I$(EPICS_PREFIX)/include/os/Darwin
endif
endif

ifeq ($(OS_NAME),HP-UX)
ifeq ($(CPU_ARCH),PA1.0)
KEKB_EPICS_ARCH=hp700
endif

ifeq ($(CPU_ARCH),PA2.0)
KEKB_EPICS_ARCH=hppa8k
endif
endif

ifneq ($(filter kekb-co-user01 kekb-co-user02 kekb-co-user03 afsad1c afsad2c afsad3c,$(HOST)),)
USE_EPICS=YES
USE_KEKB_EPICS=YES
KEKB_EPICS_ARCH=$(OS_NAME)
$(info [SAD] EPICS for $(OS_NAME).)
endif

ifeq ($(KEKB_EPICS_ARCH),Unknown)
$(error Unknown architecture)
else
USE_EPICS=YES
EPICS_PREFIX?=/proj/epics/R313/base
EPICS_LIBDIR=$(EPICS_PREFIX)/lib/$(KEKB_EPICS_ARCH)
endif
endif # USE_KEKB_EPICS==YES

# End of File
